/*
 * This file was generated by the Gradle "init" task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.springframework.boot" version "2.3.5.RELEASE"
}

apply plugin: "io.spring.dependency-management"

group "com.yada"
version "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR6"
    }
}

configurations.all {
    exclude group:"org.springframework.boot", module:"spring-boot-starter-logging"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb-reactive"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    implementation "com.nulab-inc:zxcvbn:1.3.0"
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    implementation "org.springframework.cloud:spring-cloud-starter-gateway"
    implementation "com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3"
    implementation "commons-codec:commons-codec:1.14"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api"
    implementation "org.glassfish.jaxb:jaxb-runtime"
    implementation "com.hazelcast:hazelcast:3.12.6"
    implementation "com.hazelcast:hazelcast-client:3.12.6"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "io.projectreactor:reactor-test"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

task("copyApp") {
    group("app")
    description("copy app build output")
    doLast {
        copy {
            from "../admin/dist"
            into "src/main/resources/static/admin"
            exclude("index.html")
        }
    }
    doLast {
        copy {
            from "../admin/dist/index.html"
            into "src/main/resources/templates/admin"
        }
    }
    doLast {
        copy {
            from "../app/dist"
            into "src/main/resources/static/msp"
            exclude("index.html")
        }
    }
    doLast {
        copy {
            from "../app/dist/index.html"
            into "src/main/resources/templates"
        }
    }
}

task("deleteApp") {
    group("app")
    description("delete app build output")
    doLast {
        delete "src/main/resources/static/admin"
    }
    doLast {
        delete "src/main/resources/static/msp"
    }
}

task("buildAdmin") {
    group("app")
    description("build admin")
    doLast {
        exec {
            workingDir "../admin"
            commandLine "npm", "install"
        }
        exec {
            workingDir "../admin"
            commandLine "npm", "run", "build"
        }
    }
}

task("buildApp") {
    group("app")
    description("build app")
    doLast {
        exec {
            workingDir "../app"
            commandLine "npm", "install"
        }
        exec {
            workingDir "../app"
            commandLine "npm", "run", "build:sg"
        }
    }
}

task("buildDevApp") {
    group("app")
    description("build dev env app")
    doLast {
        exec {
            workingDir "../app"
            commandLine "npm", "install"
        }
        exec {
            workingDir "../app"
            commandLine "npm", "run", "build"
        }
    }
}

task("buildDev") {
    group("build")
    description("build dev env")
    buildAdmin.mustRunAfter("deleteApp")
    buildDevApp.mustRunAfter("deleteApp")
    copyApp.mustRunAfter("buildAdmin")
    copyApp.mustRunAfter("buildDevApp")
}.dependsOn("clean", "deleteApp", "buildAdmin", "buildDevApp", "copyApp")

task("buildMspSvc") {
    group("svc")
    description("build msp svc")
    doLast {
        exec {
            workingDir "../mspSvc"
            commandLine "mvn", "clean", "package"
        }
    }
}

task("buildUserSvc") {
    group("svc")
    description("build user svc")
    doLast {
        exec {
            workingDir "../userSvc"
            commandLine "gradle", "clean", "build"
        }
    }
}

task("buildGw") {
    group("svc")
    description("build gw svc")
    buildAdmin.mustRunAfter("deleteApp")
    buildApp.mustRunAfter("deleteApp")
    copyApp.mustRunAfter("buildAdmin")
    copyApp.mustRunAfter("buildApp")
    bootJar.mustRunAfter("copyApp")
    bootJar.mustRunAfter("clean")
}.dependsOn("clean", "deleteApp", "buildAdmin", "buildApp", "copyApp", "bootJar")

task("deleteJar") {
    group("svc")
    description("delete build output")
    doLast {
        delete "../dist"
    }
}

task("copyJar") {
    group("svc")
    description("copy build jar output to dist")
    doLast {
        copy {
            from "../gw/build/libs/gw-1.0-SNAPSHOT.jar"
            into "../dist/gw"
        }
        copy {
            from "../gw/src/main/resources"
            into "../dist/gw"
            include("application*")
        }
        copy {
            from "../mspSvc/target/msp-0.0.1-SNAPSHOT.jar"
            into "../dist/msp"
        }
        copy {
            from "../mspSvc/src/main/resources"
            into "../dist/msp"
            include("application*")
        }
        copy {
            from "../userSvc/build/libs/user-0.0.1-SNAPSHOT.jar"
            into "../dist/user"
        }
        copy {
            from "../userSvc/src/main/resources"
            into "../dist/user"
            include("application*")
        }
    }
}

task("buildAll") {
    group("build")
    description("build all output to dist")
    copyJar.mustRunAfter("deleteJar")
    copyJar.mustRunAfter("buildGw")
    copyJar.mustRunAfter("buildMspSvc")
    copyJar.mustRunAfter("buildUserSvc")
}.dependsOn("deleteJar", "buildGw", "buildMspSvc", "buildUserSvc", "copyJar")